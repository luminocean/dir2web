#! /usr/bin/env node
// 本文件为dir2web的可执行入口
// 主要负责启动服务器，执行服务器的主逻辑（封装在lib/dir2web.js中）

var http = require('http');
var path = require('path');
var os = require('os');
var program = require('commander');
var dir2web = require('../lib/dir2web');

program
  .version('1.3.0')
  .option('-d, --directory [directory]', 'The directory you want to start a web server. Default to current working directory.')
  .option('-a, --address [address]', 'The ip address you want to start the server with. Default to all ipv4 addresses you have.')
  .option('-p, --port [port]', 'The server port. Default to 3000.')
  .parse(process.argv);

// 输入参数
var dir = program.directory || '.';
var address = program.address;
var port = parseInt(program.port) || 3000;

// 初始化
dir2web.init({
  'dir':dir
});

var addresses = getIPAddresses();

// 启动服务器
http.createServer(dir2web).listen(port, address, function(){
  var absDirPath = path.resolve(process.cwd(), dir);
  process.stdout.write('已将目录'+absDirPath+' 映射到 ');
  if(address) process.stdout.write(address+':'+port);
  else {
    addresses.forEach(function(address){
      process.stdout.write(address+':'+port+' ');
    });
  }

  process.stdout.write('\n');
});

// 简单粗暴地错误捕获
process.on('uncaughtException', function(err){
  console.error(err.stack);
});

// 获取本机所有的ipv4地址
function getIPAddresses(){
  var addresses = [];

  var interfaces = os.networkInterfaces();
  // 获取localhost
  var loAddresses = interfaces['lo0'];
  if(loAddresses){
    loAddresses.forEach(function(addr){
      if(addr.family == 'IPv4')
        addresses.push(addr.address);
    });
  }

  // 获取其他接口上的地址
  // 只尝试获取0-9号接口
  for(var i=0; i<10; i++){
    // 对应的unix和linux下的接口名，将逐个尝试
    var ifNames = ['en'+i, 'eth'+i];
    ifNames.forEach(function(ifName){
      var ethAddresses = interfaces[ifName];
      // 如果存在这个接口
      if(ethAddresses){
        ethAddresses.forEach(function(addr){
          if(addr.family == 'IPv4')
            addresses.push(addr.address);
        });
      }
    });
  }

  return addresses;
}
